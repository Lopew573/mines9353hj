<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mines Game</title>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Press Start 2P', cursive;
            margin: 0;
            padding: 0;
            background-color: #000;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            color: white;
            overflow: hidden;
            background: linear-gradient(45deg, #1e3c72, #2a5298, #9b4d96, #ff3b3f);
            background-size: 400% 400%;
            animation: gradientAnimation 10s ease infinite;
        }

        @keyframes gradientAnimation {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .game-container {
            position: relative;
            background: rgba(0, 0, 0, 0.7);
            border-radius: 25px;
            padding: 10px;
            text-align: center;
            width: 280px;
            height: 450px; /* Increased height */
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: space-between; /* Ensure space between elements */
        }

        .title {
            font-size: 20px;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #007bff, #00c6ff);
            background-clip: text;
            color: transparent;
            -webkit-background-clip: text;
            animation: gradientText 5s ease infinite;
        }

        @keyframes gradientText {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .info {
            font-size: 16px;
            margin-bottom: 10px;
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 5px;
            margin-top: 10px;
            width: 100%;
        }

        .cell {
            width: 50px;
            height: 50px;
            background: linear-gradient(145deg, #1e3c72, #2a5298);
            border-radius: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            color: white;
            cursor: pointer;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
            transition: transform 0.3s ease, background 0.3s ease;
            opacity: 0.9;
            position: relative;
        }

        .cell.open {
            background: transparent; /* Removed background */
            font-size: 40px; /* Increased star size */
            animation: breakEffect 0.5s ease forwards; /* Added break effect */
        }

        .cell.open::before {
            content: "ðŸŒŸ";
            animation: none; /* Removed extra animations */
            position: absolute;
        }

        @keyframes breakEffect {
            0% {
                transform: scale(1);
                opacity: 1;
            }
            70% {
                transform: scale(1.5);
                opacity: 0.5;
            }
            100% {
                transform: scale(1);
                opacity: 1;
            }
        }

        .cell.open::after {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle, transparent 50%, rgba(255, 255, 255, 0.5) 70%);
            border-radius: 50%;
            animation: particleEffect 0.5s ease forwards;
        }

        @keyframes particleEffect {
            0% {
                transform: scale(0);
                opacity: 1;
            }
            100% {
                transform: scale(2);
                opacity: 0;
            }
        }

        .button {
            padding: 8px 15px;
            font-size: 16px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            background: #4e5d6c;
            color: white;
            transition: background 0.3s ease, transform 0.1s ease;
        }

        .button:hover {
            background: #3b4e60;
        }

        .button:active {
            transform: scale(0.98);
        }

        #minesContainer {
            display: flex;
            align-items: center;
            margin-top: 5px; /* Reduced space */
        }

        #minesValue {
            font-family: 'Press Start 2P', cursive;
            font-size: 16px;
            color: white;
            margin: 0 10px;
            width: 50px;
            text-align: center;
        }

        #getSignalButton {
            background: red;
            font-family: 'Press Start 2P', cursive;
            color: white;
            animation: glowing 1.5s ease-in-out infinite;
            width: calc(100% - 20px);
            margin-top: 20px; /* Added margin to move button lower */
        }

        @keyframes glowing {
            0% { box-shadow: 0 0 10px #ff00ff; }
            50% { box-shadow: 0 0 20px #ff00ff; }
            100% { box-shadow: 0 0 10px #ff00ff; }
        }

        .disabled {
            pointer-events: none;
            opacity: 0.5;
        }

    </style>
</head>
<body>
    <div class="game-container">
        <div class="title">Mines AI HACK</div>
        <div class="info">Select number of mines</div>
        <div id="minesContainer">
            <button id="decreaseMines" class="button">&lt;</button>
            <span id="minesValue">1</span>
            <button id="increaseMines" class="button">&gt;</button>
        </div>
        <div id="grid" class="grid"></div>
        <button id="getSignalButton" class="button">Get Signal</button>
    </div>

    <script>
        let cells = [];
        let mines = 1;
        let gameStarted = false;
        let intervalId;

        const minesOptions = [1, 2, 3, 5, 7, 10, 20, 24];
        let minesIndex = 0;

        // Initialize the game when mines are selected
        document.getElementById('increaseMines').addEventListener('click', () => {
            if (gameStarted) return;
            minesIndex = (minesIndex + 1) % minesOptions.length;
            updateMines();
        });

        document.getElementById('decreaseMines').addEventListener('click', () => {
            if (gameStarted) return;
            minesIndex = (minesIndex - 1 + minesOptions.length) % minesOptions.length;
            updateMines();
        });

        function updateMines() {
            mines = minesOptions[minesIndex];
            document.getElementById('minesValue').textContent = mines;
        }

        // Create grid with cells
        function createGrid() {
            const grid = document.getElementById('grid');
            grid.innerHTML = ''; // Reset grid
            cells = []; // Reset cells array

            for (let i = 0; i < 25; i++) {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                cell.dataset.index = i;
                cells.push(cell); // Store cells for later manipulation
                grid.appendChild(cell);
            }
        }

        // Reset the grid
        function resetGrid() {
            cells.forEach(cell => cell.classList.remove('open')); // Remove 'open' class from all cells
        }

        // Get Signal button logic
        document.getElementById('getSignalButton').addEventListener('click', () => {
            // Disable mine selection after starting the game
            gameStarted = true;
            updateMineSelectionState(false);

            // Reset the grid before opening random cells
            resetGrid();
            if (intervalId) clearInterval(intervalId);
            openRandomCells(mines);
        });

        function openRandomCells(mines) {
            let openCount = 0;
            let maxOpenCells = determineOpenCells(mines);
            intervalId = setInterval(() => {
                if (openCount >= maxOpenCells) {
                    clearInterval(intervalId);
                    updateMineSelectionState(true);
                    gameStarted = false;
                    return;
                }
                const randomIndex = Math.floor(Math.random() * 25);
                const cell = cells[randomIndex];
                if (!cell.classList.contains('open')) {
                    cell.classList.add('open');
                    openCount++;
                }
            }, 50); // Reduced delay to 50ms
        }

        function determineOpenCells(mines) {
            let maxOpenCells = 0;
            let randomValue = Math.random();
            switch(mines) {
                case 1:
                    maxOpenCells = (randomValue <= 0.87) ? 24 : Math.floor(Math.random() * 5) + 20;
                    break;
                case 2:
                    maxOpenCells = (randomValue <= 0.80) ? 20 : Math.floor(Math.random() * 6) + 10;
                    break;
                case 3:
                    maxOpenCells = (randomValue <= 0.40) ? 18 : Math.floor(Math.random() * 6) + 5;
                    break;
                case 5:
                    maxOpenCells = (randomValue <= 0.80) ? Math.floor(Math.random() * 3) + 2 : Math.floor(Math.random() * 3) + 3;
                    break;
                case 7:
                    maxOpenCells = (randomValue <= 0.80) ? Math.floor(Math.random() * 2) + 2 : Math.floor(Math.random() * 2) + 3;
                    break;
                case 10:
                    maxOpenCells = (randomValue <= 0.80) ? Math.floor(Math.random() * 2) + 1 : Math.floor(Math.random() * 2) + 2;
                    break;
                case 20:
                    maxOpenCells = (randomValue <= 0.90) ? 1 : Math.floor(Math.random() * 2) + 1;
                    break;
                case 24:
                    maxOpenCells = 1;
                    break;
            }
            return maxOpenCells;
        }

        function updateMineSelectionState(enabled) {
            const elements = [document.getElementById('decreaseMines'), document.getElementById('increaseMines')];
            elements.forEach(el => {
                if (enabled) {
                    el.classList.remove('disabled');
                } else {
                    el.classList.add('disabled');
                }
            });
        }

        // Initial grid creation
        createGrid();

    </script>
</body>
</html>
